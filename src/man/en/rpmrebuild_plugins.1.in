.TH "rpmrebuild_plugins" "1" "@VERSION@" "Valery Reznic" "rpm tools"
.SH "NAME"
rpmrebuild_plugins \- is an engine to expand \fBrpmrebuild\fP functionality.
.SH "SYNOPSIS"
rpmrebuild [\fInon\-plugins\-option\fP] [\fIplugins\-option\fP] <\fIpackagename\fP>
.SH "DESCRIPTION"
\fBrpmrebuild\fP itself try to do it's best to reconstruct rpm package as close to original as possible.
.LP
rpmrebuild plugins's aim is opposite \- somehow change rebuilded rpm.
.SH "RPMREBUILD WITHOUT PLUGINS"
Without plugins process of rpm rebuilding looks like:
.TP
\fBquery\fP \-
Query rpm to be rebuilded for the different pieces of information.
.TP
\fBconcatenate\fP \-
Create from these pieces specfile.
.TP
\fBbuild\fP \-
Use specfile to build rpm.
.SH "RPMREBUILD WITH PLUGINS"
With plugins process of rpm rebuilding looks like:
.TP
\fBquery\fP \-
Query rpm to be rebuilded for the different pieces of information.
.TP
\fBchange parts\fP \-
Change parts of the spec created by query.
.TP
\fBconcatenate\fP \-
Create specfile from the pieces.
.TP
\fBchange whole\fP \-
Change concatenated specfile.
.TP
\fBbuild\fP \-
use specfile to build rpm.
.SH "SPECFILE PIECES"
Query" queries for the following information:
.RS
.br
preamble
.br
conflicts
.br
obsoletes
.br
provides
.br
requires
.br
description
.br
files
.br
triggers
.br
pre
.br
post
.br
preun
.br
postun
.br
verifyscript
.br
changelog
.RE
.SH "SPECFILE CONCATENATION"
Concatenate" create 'full' specfile from the pieces.
It do following:
.LP
add AutoReq / AutoProv tags
.br
add BuildRoot tag
.br
add some defines to adjust rpm's behaviour.
.br
double all '%' \- it'll prevent rpm from attempting expand %something as macro.
.br
add '%description' before description
.br
add '%files' before files
.br
add '%changelog' before changelog
.SH "PLUGINS TYPES"
rpm building (or rebuilding) process has two inputs: specfile and
package's files under buildroot directory. So, there are two plugins type:
.TP
\- for specfile modification (exemple : demo.plug).
.TP
\- for files (under buildroot) modification (exemple : demofiles.plug).
.SH "PLUGIN'S INTERFACE"
Plugins are executed AFTER rpm package is queried and BEFORE new package is
rebuilded in the order specified on the command line.
.TP
Exit status
Any plugin should exit with status 0 on success, and any other value on failure.
Failed plugin will immediately terminate whole rpmrebuild.
.TP
Environment variables
all plugins get following environment variables:
.RS
.TP
RPMREBUILD_TMPDIR
directory for plugin's temporaries files. plugin no need remove this directory \-
rpmrebuild will care.
.TP
RPMREBUILD_PLUGINS_DIR
directory with plugins.
.TP
RPMREBUILD_COMMENT_MISSING
if 'yes' missing files commented in the 'files' part of specfile
.TP
RPMREBUILD_PUG_FROM_FS
if 'yes' permission owner and group in the part file were taken from filesystem,
otherwise \- from rpm's database.
.TP
RPMREBUILD_WARNING
if 'yes' rpmrebuild will produce warning for filenames with glob characters.
.TP
PATH
This variable is set to $RPMREBUILD_PLUGINS_DIR:$PATH
.TP
LONG_OPTION
Contains long option (without \-\-) which was used to invoke plugin.
.TP
RPM_BUILD_ROOT
For plugins modifying files under buildroot set to buildroot.
For other plugins \- empty.
.RE
.TP
stdin and stdout
Plugins for specfile modification (i.e., invoked with \-\-spec\-\change\-*)
got "source" spec file from stdin and have to write resulting spec file to
stdout.
.SH "PLUGIN'S EXAMPLES"
Some plugins are given as examples :
.TP
demofiles.plug (change\-files) : a "dummy" plugin to show what can be done with a file plugin
.TP
demo.plug (change\-spec\-*) : a "dummy" plugin to show how spec plugins work
.TP
uniq.plug (change\-spec) : a very simple "real" plugin to sort and clean duplicate spec lines
.TP
file2pacDep.plug (change\-spec\-requires) : a "real" plugin to convert file dependencies to package dependencies
.TP
nodoc.plug (change\-spec\-files): a "real" plugin to remove documentation from a package
.TP
set_tag.plug (change\-spec\-preamble) : a "real" plugin to change a tag in spec file
.TP
unset_tag.plug (change\-spec\-preamble) : a "real" plugin to comment a tag in spec file
.SH "PLUGINS' MANPAGES FILENAME CONVENTION"
If you are going to write plugin (and manpage for it) it's strongly
recommended than manpage's file looks like \fBname.1rrp\fP \- this way
command \fB'man \-k rrp'\fP will provide list of all rpmrebuild's plugins
installed. Please note, that \fBmakewhatis\fP should be run
before newly installed manpages will be available for \fB'man \-k rrp'
.SH "AUTHORS"
.LP
Eric Gerbier <eric.gerbier@tutanota.com>
.br
Valery Reznic <valery_reznic@users.sourceforge.net>
.TP
See <URL:http://rpmrebuild.sourceforge.net/>.
.SH "SEE ALSO"
.LP
rpm(8), rpmbuild(8), rpmrebuild(1), demofiles.plug(1), demo.plug(1), nodoc.plug(1), uniq.plug(1), file2pacDep.plug(1), set_tag.plug(1), unset_tag.plug(1)
 'man \-k rrp' for plugins specific manpages
